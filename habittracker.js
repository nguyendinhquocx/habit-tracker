/**
 * HABIT TRACKER - Daily Email Report System (FIXED VERSION)
 * 
 * FIXED: ƒê·ªçc ƒë√∫ng c·∫•u tr√∫c ng√†y t·ª´ C9 (th√°ng/nƒÉm) + h√†ng 15 (s·ªë ng√†y)
 * 
 * @version 1.1
 * @author Nguyen Dinh Quoc
 * @updated 2025-07-07
 */

function sendDailyHabitReport() {
  const CONFIG = {
    // C·∫•u h√¨nh Sheet
    spreadsheetId: '1TrFiuWnxOqh7UjxRRIEaF6DFRRutdNdO-OxBRGC9Oho',
    sheetName: 'habit',
    
    // V√πng d·ªØ li·ªáu
    dataRange: 'C14:AI31',
    monthYearCell: 'C9',    // √î ch·ª©a th√°ng/nƒÉm (VD: "07/2025")
    dayOfWeekRow: 14,       // H√†ng ch·ª©a th·ª©  
    dateRow: 15,            // H√†ng ch·ª©a s·ªë ng√†y (1, 2, 3, 4...)
    habitNameCol: 'C',      // C·ªôt t√™n th√≥i quen
    dataStartCol: 'E',      // C·ªôt b·∫Øt ƒë·∫ßu d·ªØ li·ªáu checkbox
    
    // Email settings
    emailTo: 'quoc.nguyen3@hoanmy.com', // Thay email c·ªßa b·∫°n
    
    // Slack settings
    slackWebhookUrl: 'https://hooks.slack.com/services/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', // ‚ö†Ô∏è C·∫¶N C·∫¨P NH·∫¨T: Thay b·∫±ng Slack webhook URL h·ª£p l·ªá c·ªßa b·∫°n
    slackChannel: '#habit', // K√™nh Slack
    enableSlack: true, // T·∫°m t·∫Øt Slack cho ƒë·∫øn khi c√≥ webhook URL h·ª£p l·ªá
    
    // Icons (minimal design)
    completedIcon: 'https://cdn-icons-png.flaticon.com/128/7046/7046053.png',
    pendingIcon: 'https://cdn-icons-png.flaticon.com/128/17694/17694317.png',
    streakIcon: 'https://cdn-icons-png.flaticon.com/128/18245/18245248.png', // Updated star icon
    calendarIcon: 'https://cdn-icons-png.flaticon.com/128/3239/3239948.png',
    
    // Perfect day icons (green when all completed)
    completedIconPerfect: 'https://cdn-icons-png.flaticon.com/128/10995/10995390.png',
    pendingIconPerfect: 'https://cdn-icons-png.flaticon.com/128/17694/17694222.png',
    celebrationIcon: 'https://cdn-icons-png.flaticon.com/128/9422/9422222.png',
    
    // Debug mode
    debugMode: true // B·∫≠t ƒë·ªÉ debug
  };

  try {
    // M·ªü spreadsheet
    const ss = SpreadsheetApp.openById(CONFIG.spreadsheetId);
    const sheet = ss.getSheetByName(CONFIG.sheetName);
    
    if (!sheet) {
      Logger.log(`‚ùå Sheet '${CONFIG.sheetName}' kh√¥ng t·ªìn t·∫°i`);
      return;
    }

    const today = new Date();
    const todayDay = today.getDate(); // L·∫•y s·ªë ng√†y hi·ªán t·∫°i (7 n·∫øu h√¥m nay l√† 7/7/2025)
    
    // FIXED: ƒê·ªçc th√°ng/nƒÉm t·ª´ √¥ C9
    const monthYearCell = sheet.getRange(CONFIG.monthYearCell).getValue();
    if (CONFIG.debugMode) {
      Logger.log(`üîç Th√°ng/nƒÉm t·ª´ √¥ C9: ${monthYearCell}`);
      Logger.log(`üîç Ng√†y h√¥m nay c·∫ßn t√¨m: ${todayDay}`);
    }
    
    // ƒê·ªãnh d·∫°ng ng√†y chi ti·∫øt
    const dayNames = ['Ch·ªß nh·∫≠t', 'Th·ª© hai', 'Th·ª© ba', 'Th·ª© t∆∞', 'Th·ª© nƒÉm', 'Th·ª© s√°u', 'Th·ª© b·∫£y'];
    const dayOfWeek = dayNames[today.getDay()];
    const detailedDate = `${dayOfWeek}, ng√†y ${today.getDate()} th√°ng ${today.getMonth() + 1} nƒÉm ${today.getFullYear()}`;

    // L·∫•y to√†n b·ªô d·ªØ li·ªáu
    const dataRange = sheet.getRange(CONFIG.dataRange);
    const values = dataRange.getValues();
    
    // FIXED: T√¨m c·ªôt c√≥ s·ªë ng√†y = ng√†y h√¥m nay
    const dateRow = values[CONFIG.dateRow - 14]; // Row 15 trong sheet = index 1 trong array
    let todayColIndex = -1;
    
    for (let col = 0; col < dateRow.length; col++) {
      const cellValue = dateRow[col];
      // So s√°nh v·ªõi s·ªë ng√†y h√¥m nay
      if (cellValue == todayDay) {
        todayColIndex = col;
        if (CONFIG.debugMode) {
          Logger.log(`üéØ T√¨m th·∫•y ng√†y ${todayDay} ·ªü c·ªôt index: ${col}`);
        }
        break;
      }
    }
    
    if (todayColIndex === -1) {
      Logger.log(`‚ùå Kh√¥ng t√¨m th·∫•y c·ªôt cho ng√†y: ${todayDay}`);
      Logger.log(`üìã D·ªØ li·ªáu h√†ng ng√†y: ${dateRow}`);
      return;
    }

    // Ph√¢n t√≠ch th√≥i quen
    const habits = analyzeHabits(values, todayColIndex, CONFIG);
    const completedHabits = habits.filter(h => h.completed);
    const pendingHabits = habits.filter(h => !h.completed);
    
    // Ki·ªÉm tra perfect day
    const isPerfectDay = pendingHabits.length === 0 && completedHabits.length > 0;
    
    // T√≠nh t·ª∑ l·ªá ho√†n th√†nh
    const completionRate = habits.length > 0 ? (completedHabits.length / habits.length) * 100 : 0;
    
    // Subject email
    const subject = `Habit Report ${todayDay}/${today.getMonth() + 1}/${today.getFullYear()} ${isPerfectDay ? 'üéâ' : ''}`;

    // Ch·ªçn icons v√† m√†u s·∫Øc
    const colors = isPerfectDay ? {
      border: '#22c55e',
      headerTitle: '#22c55e',
      headerSubtitle: '#16a34a',
      dateText: '#16a34a',
      sectionTitle: '#22c55e',
      footerText: '#16a34a'
    } : {
      border: '#000000',
      headerTitle: '#1a1a1a',
      headerSubtitle: '#8e8e93',
      dateText: '#495057',
      sectionTitle: '#1a1a1a',
      pendingTitle: '#dc3545',
      footerText: '#8e8e93'
    };

    const calendarIcon = CONFIG.calendarIcon;
    const completedIcon = isPerfectDay ? CONFIG.completedIconPerfect : CONFIG.completedIcon;
    const pendingIcon = isPerfectDay ? CONFIG.pendingIconPerfect : CONFIG.pendingIcon;

    // X√¢y d·ª±ng HTML sections
    const completedSection = buildHabitSection(completedHabits, 'ƒê√£ ho√†n th√†nh', completedIcon, colors.sectionTitle, CONFIG);
    const pendingSection = buildHabitSection(pendingHabits, 'Ch∆∞a th·ª±c hi·ªán', pendingIcon, isPerfectDay ? colors.sectionTitle : colors.pendingTitle, CONFIG);
    
    // Progress bar
    const progressBar = buildProgressBar(completionRate, isPerfectDay);
    
    // GitHub-style contribution visualization
    const contributionGrid = buildContributionGrid(sheet, habits, CONFIG, colors, isPerfectDay);

    // HTML Email Template
    const htmlBody = `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Habit Report ${todayDay}/${today.getMonth() + 1}/${today.getFullYear()}</title>
      </head>
      <body style="margin: 0; padding: 0; background-color: #ffffff; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;">
        
        <!-- Main Container -->
        <div style="max-width: 600px; margin: 40px auto; padding: 40px; border: 1px solid ${colors.border}; border-radius: 12px;">
          
          <!-- Header -->
          <div style="text-align: center; margin-bottom: 48px;">
            <h1 style="margin: 0; font-size: 28px; font-weight: 300; color: ${colors.headerTitle}; letter-spacing: -0.5px;">
              Habit Tracker ${isPerfectDay ? 'üéâ' : ''}
            </h1>
            <p style="margin: 8px 0 0; font-size: 16px; font-weight: 400; color: ${colors.headerSubtitle};">
              B√°o c√°o th√≥i quen c√° nh√¢n
            </p>
          </div>

          <!-- Date -->
          <div style="margin-bottom: 32px;">
            <span style="font-size: 14px; font-weight: 500; color: ${colors.dateText};">
              <img src="${calendarIcon}" width="16" height="16" style="vertical-align: middle; margin-right: 8px;" alt="Calendar">
              ${detailedDate}
            </span>
          </div>

          <!-- Progress Overview -->
          <div style="margin-bottom: 32px; background-color: #ffffff; border: 1px solid #e9ecef; border-radius: 12px; padding: 24px;">
            <h3 style="margin: 0 0 16px; font-size: 16px; font-weight: 600; color: ${colors.sectionTitle}; text-align: center;">
              T·ªïng quan ti·∫øn ƒë·ªô
            </h3>
            ${progressBar}
            <div style="text-align: center; margin-top: 16px;">
              <span style="font-size: 18px; font-weight: 600; color: ${colors.sectionTitle};">
                ${completedHabits.length}/${habits.length} th√≥i quen
              </span>
              <span style="font-size: 14px; color: ${colors.headerSubtitle}; margin-left: 8px;">
                (${Math.round(completionRate)}%)
              </span>
            </div>
          </div>

          <!-- GitHub-style Contribution Grid -->
          ${contributionGrid}

          <!-- Completed Habits -->
          ${completedSection}

          <!-- Pending Habits -->
          ${pendingSection}

          <!-- Daily Motivation -->
          ${buildMotivationSection(isPerfectDay, completionRate, colors)}

          <!-- Footer -->
          <div style="text-align: center; padding-top: 32px; border-top: 1px solid #f5f5f5;">
            <p style="margin: 0 0 6px; font-size: 12px; color: ${colors.footerText};">
              Keep building great habits! üí™
            </p>
            <p style="margin: 0; font-size: 12px; font-weight: 500; color: ${colors.footerText};">
              ${isPerfectDay ? 'Perfect Day Achievement Unlocked! üèÜ' : 'Tomorrow is a new opportunity'}
            </p>
          </div>

          <!-- Disclaimer -->
          <div style="margin-top: 40px; text-align: center;">
          </div>

        </div>
        
      </body>
      </html>
    `;

    // G·ª≠i email
    sendEmailWithRetry({
      to: CONFIG.emailTo,
      subject: subject,
      htmlBody: htmlBody
    });

    // G·ª≠i Slack (n·∫øu ƒë∆∞·ª£c b·∫≠t)
    if (CONFIG.enableSlack && CONFIG.slackWebhookUrl) {
      try {
        sendSlackReport({
          habits: habits,
          completedHabits: completedHabits,
          pendingHabits: pendingHabits,
          completionRate: completionRate,
          isPerfectDay: isPerfectDay,
          detailedDate: detailedDate,
          config: CONFIG
        });
        Logger.log(`‚úÖ Slack habit report ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng`);
      } catch (error) {
        Logger.log(`‚ùå L·ªói khi g·ª≠i Slack: ${error.message}`);
      }
    } else if (CONFIG.enableSlack && !CONFIG.slackWebhookUrl) {
      Logger.log(`‚ö†Ô∏è Slack ƒë∆∞·ª£c b·∫≠t nh∆∞ng ch∆∞a c√≥ webhook URL`);
    }

    Logger.log(`‚úÖ Email habit report ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng`);
    Logger.log(`üìä T·ªïng k·∫øt: ${completedHabits.length}/${habits.length} th√≥i quen ho√†n th√†nh (${Math.round(completionRate)}%)`);

  } catch (error) {
    Logger.log(`‚ùå L·ªói khi g·ª≠i email habit report: ${error.message}`);
    Logger.log(`Stack trace: ${error.stack}`);
  }
}

/**
 * FIXED: Ph√¢n t√≠ch th√≥i quen t·ª´ d·ªØ li·ªáu sheet 
 */
function analyzeHabits(values, todayColIndex, CONFIG) {
  const habits = [];
  
  try {
    // B·∫Øt ƒë·∫ßu t·ª´ row 16 (index 2) v√¨ row 14-15 l√† header
    for (let row = 2; row < values.length; row++) {
      const habitName = values[row][0]; // C·ªôt C = index 0 trong range C14:AI31
      if (!habitName || habitName.toString().trim() === '') continue;
      
      const todayStatus = values[row][todayColIndex];
      
      // FIXED: Ki·ªÉm tra nhi·ªÅu ƒë·ªãnh d·∫°ng checkbox
      const isCompleted = todayStatus === true || 
                         todayStatus === 'TRUE' || 
                         todayStatus === '‚úì' || 
                         todayStatus === 'x' || 
                         todayStatus === 'X' ||
                         todayStatus === 1;
      
      // T√≠nh streak (chu·ªói ng√†y li√™n ti·∫øp)
      const streak = calculateHabitStreak(values[row], todayColIndex);
      
      habits.push({
        name: habitName.toString().trim(),
        completed: isCompleted,
        streak: streak,
        todayStatus: todayStatus
      });
      
      if (CONFIG.debugMode) {
        Logger.log(`üîç Habit: ${habitName} | Status: ${todayStatus} | Completed: ${isCompleted} | Streak: ${streak}`);
      }
    }
  } catch (error) {
    Logger.log(`‚ùå L·ªói khi ph√¢n t√≠ch habits: ${error.message}`);
  }
  
  return habits;
}

/**
 * FIXED: T√≠nh streak (chu·ªói ng√†y li√™n ti·∫øp) cho th√≥i quen
 */
function calculateHabitStreak(habitRow, todayColIndex) {
  let streak = 0;
  
  try {
    // ƒê·∫øm ng∆∞·ª£c t·ª´ h√¥m nay v·ªÅ tr∆∞·ªõc
    for (let col = todayColIndex; col >= 0; col--) {
      const cellValue = habitRow[col];
      const isCompleted = cellValue === true || 
                         cellValue === 'TRUE' || 
                         cellValue === '‚úì' || 
                         cellValue === 'x' || 
                         cellValue === 'X' ||
                         cellValue === 1;
      
      if (isCompleted) {
        streak++;
      } else {
        break; // D·ª´ng khi g·∫∑p ng√†y kh√¥ng ho√†n th√†nh
      }
    }
  } catch (error) {
    Logger.log(`‚ùå L·ªói khi t√≠nh streak: ${error.message}`);
  }
  
  return streak;
}

/**
 * X√¢y d·ª±ng section cho danh s√°ch th√≥i quen
 */
function buildHabitSection(habits, title, icon, titleColor, CONFIG) {
  if (habits.length === 0) {
    const emptyMessage = title.includes('ƒê√£ ho√†n th√†nh') ? 
      'Ch∆∞a c√≥ th√≥i quen n√†o ƒë∆∞·ª£c ho√†n th√†nh h√¥m nay' : 
      `Tuy·ªát v·ªùi! T·∫•t c·∫£ th√≥i quen ƒë√£ ho√†n th√†nh <img src="${CONFIG.celebrationIcon}" width="20" height="20" style="margin-left: 8px;" alt="Celebration">`;
    
    return `
      <div style="margin-bottom: 32px; background-color: #ffffff; border: 1px solid #e9ecef; border-radius: 12px; overflow: hidden;">
        <div style="padding: 20px 24px 16px; border-bottom: 1px solid #f5f5f5;">
          <h2 style="margin: 0; font-size: 18px; font-weight: 500; color: ${titleColor}; display: flex; align-items: center;">
            <img src="${icon}" width="20" height="20" style="margin-right: 12px;" alt="${title}">
            ${title}
          </h2>
        </div>
        <div style="padding: 24px; text-align: center; color: #8e8e93; font-style: italic;">
          ${emptyMessage}
        </div>
      </div>
    `;
  }

  // S·∫Øp x·∫øp theo streak gi·∫£m d·∫ßn
  habits.sort((a, b) => b.streak - a.streak);

  const habitItems = habits.map(habit => {
    const streakDisplay = habit.streak > 0 ? 
      `<span style="background: linear-gradient(135deg, #22c55e, #16a34a); color: white; padding: 4px 8px; border-radius: 12px; font-size: 12px; font-weight: 600;">
        <img src="${CONFIG.streakIcon}" width="12" height="12" style="margin-right: 4px; filter: brightness(0) invert(1);" alt="Streak">
        ${habit.streak} ng√†y
      </span>` : '';

    return `
      <div style="padding: 16px 0; border-bottom: 1px solid #f5f5f5; display: flex; justify-content: space-between; align-items: center;">
        <span style="flex: 1; font-size: 15px; font-weight: 400; color: #1a1a1a;">
          ${habit.name}
        </span>
        ${streakDisplay}
      </div>
    `;
  }).join('');

  return `
    <div style="margin-bottom: 32px; background-color: #ffffff; border: 1px solid #e9ecef; border-radius: 12px; overflow: hidden;">
      <div style="padding: 20px 24px 16px; border-bottom: 1px solid #f5f5f5;">
        <div style="display: flex; align-items: center; justify-content: space-between;">
          <h2 style="margin: 0; font-size: 18px; font-weight: 500; color: ${titleColor}; display: flex; align-items: center;">
            <img src="${icon}" width="20" height="20" style="margin-right: 12px;" alt="${title}">
            ${title}
          </h2>
          <span style="background: #f3f4f6; color: #374151; padding: 6px 12px; border-radius: 12px; font-weight: 600; font-size: 13px;">
            ${habits.length}
          </span>
        </div>
      </div>
      <div style="padding: 0 24px 8px;">
        ${habitItems}
      </div>
    </div>
  `;
}

/**
 * Build GitHub-style contribution grid
 */
function buildContributionGrid(sheet, habits, CONFIG, colors, isPerfectDay) {
  try {
    const today = new Date();
    const endDate = new Date(today);
    const startDate = new Date(today);
    startDate.setDate(startDate.getDate() - 90); // Show last 90 days
    
    // Get all data from sheet
     const dataRange = sheet.getRange(CONFIG.dataRange);
     const allData = dataRange.getValues();
     
     // Find date row
     const dateRowIndex = CONFIG.dateRow - 14; // Row 15 in sheet = index 1 in array
    const dateRow = allData[dateRowIndex];
    
    // Build grid data
    const gridData = [];
    const currentDate = new Date(startDate);
    
    while (currentDate <= endDate) {
      const currentDay = currentDate.getDate();
      
      // Find column for this date
      let dateColIndex = -1;
      for (let col = 0; col < dateRow.length; col++) {
        const cellValue = dateRow[col];
        if (cellValue == currentDay) {
          dateColIndex = col;
          break;
        }
      }
      
      let completionCount = 0;
      if (dateColIndex >= 0) {
        // Count completed habits for this date
        for (let row = 2; row < allData.length; row++) {
          const habitName = allData[row][0];
          if (!habitName || habitName.toString().trim() === '') continue;
          
          const cellValue = allData[row][dateColIndex];
          const isCompleted = cellValue === true || 
                             cellValue === 'TRUE' || 
                             cellValue === '‚úì' || 
                             cellValue === 'x' || 
                             cellValue === 'X' ||
                             cellValue === 1;
          
          if (isCompleted) {
            completionCount++;
          }
        }
      }
      
      const completionRate = habits.length > 0 ? (completionCount / habits.length) : 0;
      gridData.push({
        date: new Date(currentDate),
        completionRate: completionRate,
        completionCount: completionCount,
        totalHabits: habits.length
      });
      
      currentDate.setDate(currentDate.getDate() + 1);
    }
    
    // Build HTML grid
    let gridHtml = `
      <div style="margin-bottom: 32px; background-color: #ffffff; border: 1px solid #e9ecef; border-radius: 12px; padding: 24px;">
        <h3 style="margin: 0 0 16px; font-size: 16px; font-weight: 600; color: ${colors.sectionTitle}; text-align: center;">
          L·ªãch s·ª≠ th√≥i quen (90 ng√†y g·∫ßn nh·∫•t)
        </h3>
        <div style="display: flex; flex-wrap: wrap; gap: 2px; justify-content: center; max-width: 600px; margin: 0 auto;">
    `;
    
    gridData.forEach(day => {
      const intensity = getContributionIntensity(day.completionRate);
      const color = getContributionColor(intensity, isPerfectDay && day.date.toDateString() === today.toDateString());
      const tooltip = `${day.date.getDate()}/${day.date.getMonth() + 1}: ${day.completionCount}/${day.totalHabits} th√≥i quen`;
      
      gridHtml += `
        <div style="
          width: 12px; 
          height: 12px; 
          background-color: ${color}; 
          border-radius: 2px;
          border: 1px solid #e1e4e8;
          title: '${tooltip}';
        "></div>
      `;
    });
    
    gridHtml += `
        </div>
        <div style="display: flex; justify-content: center; align-items: center; margin-top: 16px; font-size: 12px; color: ${colors.headerSubtitle};">
          <span style="margin-right: 8px;">√çt</span>
          <div style="display: flex; gap: 2px;">
            <div style="width: 10px; height: 10px; background-color: #ebedf0; border-radius: 2px;"></div>
            <div style="width: 10px; height: 10px; background-color: #c6e48b; border-radius: 2px;"></div>
            <div style="width: 10px; height: 10px; background-color: #7bc96f; border-radius: 2px;"></div>
            <div style="width: 10px; height: 10px; background-color: #239a3b; border-radius: 2px;"></div>
            <div style="width: 10px; height: 10px; background-color: #196127; border-radius: 2px;"></div>
          </div>
          <span style="margin-left: 8px;">Nhi·ªÅu</span>
        </div>
      </div>
    `;
    
    return gridHtml;
    
  } catch (error) {
    Logger.log(`‚ùå Error building contribution grid: ${error.message}`);
    return '';
  }
}

/**
 * Get contribution intensity level (0-4)
 */
function getContributionIntensity(completionRate) {
  if (completionRate === 0) return 0;
  if (completionRate <= 0.25) return 1;
  if (completionRate <= 0.5) return 2;
  if (completionRate <= 0.75) return 3;
  return 4;
}

/**
 * Get contribution color based on intensity
 */
function getContributionColor(intensity, isToday = false) {
  const colors = {
    0: '#ebedf0',  // No activity
    1: '#c6e48b',  // Low activity
    2: '#7bc96f',  // Medium-low activity
    3: '#239a3b',  // Medium-high activity
    4: '#196127'   // High activity
  };
  
  // Highlight today with a special border or slightly different shade
  if (isToday && intensity > 0) {
    return colors[intensity];
  }
  
  return colors[intensity] || colors[0];
}

/**
 * X√¢y d·ª±ng progress bar
 */
function buildProgressBar(percentage, isPerfectDay) {
  const barColor = isPerfectDay ? '#22c55e' : 
                   percentage >= 80 ? '#84cc16' :
                   percentage >= 60 ? '#eab308' : '#ef4444';
  
  return `
    <div style="background-color: #f3f4f6; border-radius: 8px; overflow: hidden; height: 8px;">
      <div style="background-color: ${barColor}; height: 100%; width: ${percentage}%; transition: width 0.3s ease;"></div>
    </div>
  `;
}

/**
 * Section ƒë·ªông vi√™n
 */
function buildMotivationSection(isPerfectDay, completionRate, colors) {
  let message, emoji;
  
  if (isPerfectDay) {
    message = "Xu·∫•t s·∫Øc! B·∫°n ƒë√£ ho√†n th√†nh t·∫•t c·∫£ th√≥i quen h√¥m nay. H√£y ti·∫øp t·ª•c duy tr√¨!";
    emoji = "üèÜ";
  } else if (completionRate >= 80) {
    message = "R·∫•t t·ªët! B·∫°n ƒë√£ ho√†n th√†nh h·∫ßu h·∫øt c√°c th√≥i quen. H√£y c·ªë g·∫Øng th√™m m·ªôt ch√∫t!";
    emoji = "üí™";
  } else if (completionRate >= 50) {
    message = "Kh√¥ng sao, ng√†y mai l√† c∆° h·ªôi m·ªõi. H√£y t·∫≠p trung v√†o nh·ªØng th√≥i quen c√≤n l·∫°i!";
    emoji = "üå±";
  } else {
    message = "ƒê·ª´ng n·∫£n l√≤ng! M·ªói ng√†y l√† m·ªôt kh·ªüi ƒë·∫ßu m·ªõi. H√£y b·∫Øt ƒë·∫ßu t·ª´ nh·ªØng th√≥i quen nh·ªè!";
    emoji = "‚≠ê";
  }

  return `
    <div style="margin-bottom: 32px; background: linear-gradient(135deg, #f8fafc, #f1f5f9); border: 1px solid #e2e8f0; border-radius: 12px; padding: 24px; text-align: center;">
      <div style="font-size: 32px; margin-bottom: 12px;">${emoji}</div>
      <p style="margin: 0; font-size: 16px; color: ${colors.sectionTitle}; line-height: 1.5; font-weight: 500;">
        ${message}
      </p>
    </div>
  `;
}

/**
 * G·ª≠i email v·ªõi retry mechanism
 */
function sendEmailWithRetry(emailConfig, maxRetries = 3) {
  for (let i = 0; i < maxRetries; i++) {
    try {
      MailApp.sendEmail(emailConfig);
      Logger.log(`‚úÖ Email sent successfully on attempt ${i + 1}`);
      return true;
    } catch (error) {
      Logger.log(`‚ùå Email attempt ${i + 1} failed: ${error.message}`);
      if (i === maxRetries - 1) throw error;
      Utilities.sleep(1000 * (i + 1)); // Exponential backoff
    }
  }
  return false;
}

/**
 * T·∫°o trigger t·ª± ƒë·ªông g·ª≠i b√°o c√°o h√†ng ng√†y l√∫c 8:00 s√°ng
 */
function createDailyTrigger() {
  try {
    // X√≥a trigger c≈© n·∫øu c√≥
    const triggers = ScriptApp.getProjectTriggers();
    triggers.forEach(trigger => {
      if (trigger.getHandlerFunction() === 'sendDailyHabitReport') {
        ScriptApp.deleteTrigger(trigger);
      }
    });
    
    // T·∫°o trigger m·ªõi
    ScriptApp.newTrigger('sendDailyHabitReport')
      .timeBased()
      .everyDays(1)
      .atHour(8)
      .create();
    
    Logger.log('‚úÖ ƒê√£ t·∫°o trigger g·ª≠i b√°o c√°o h√†ng ng√†y l√∫c 8:00 s√°ng');
    
  } catch (error) {
    Logger.log(`‚ùå L·ªói t·∫°o trigger: ${error.message}`);
  }
}

/**
 * T·∫°o nhi·ªÅu trigger t·ª± ƒë·ªông g·ª≠i b√°o c√°o trong ng√†y
 * S√°ng 7:00, Tr∆∞a 11:30, T·ªëi 19:00
 */
function createMultipleDailyTriggers() {
  try {
    // X√≥a t·∫•t c·∫£ trigger c≈©
    const triggers = ScriptApp.getProjectTriggers();
    triggers.forEach(trigger => {
      if (trigger.getHandlerFunction() === 'sendDailyHabitReport') {
        ScriptApp.deleteTrigger(trigger);
      }
    });
    
    // T·∫°o trigger s√°ng 7:00
    ScriptApp.newTrigger('sendDailyHabitReport')
      .timeBased()
      .everyDays(1)
      .atHour(7)
      .create();
    
    // T·∫°o trigger tr∆∞a 11:30
    ScriptApp.newTrigger('sendDailyHabitReport')
      .timeBased()
      .everyDays(1)
      .atHour(11)
      .nearMinute(30)
      .create();
    
    // T·∫°o trigger t·ªëi 19:00
    ScriptApp.newTrigger('sendDailyHabitReport')
      .timeBased()
      .everyDays(1)
      .atHour(21)
      .create();
    
    Logger.log('‚úÖ ƒê√£ t·∫°o 3 trigger g·ª≠i b√°o c√°o:');
    Logger.log('   - S√°ng 7:00');
    Logger.log('   - Tr∆∞a 11:30');
    Logger.log('   - T·ªëi 19:00');
    
  } catch (error) {
    Logger.log(`‚ùå L·ªói t·∫°o trigger: ${error.message}`);
  }
}

/**
 * X√≥a t·∫•t c·∫£ trigger t·ª± ƒë·ªông
 */
function deleteAllTriggers() {
  try {
    const triggers = ScriptApp.getProjectTriggers();
    let deletedCount = 0;
    
    triggers.forEach(trigger => {
      if (trigger.getHandlerFunction() === 'sendDailyHabitReport') {
        ScriptApp.deleteTrigger(trigger);
        deletedCount++;
      }
    });
    
    Logger.log(`‚úÖ ƒê√£ x√≥a ${deletedCount} trigger`);
    
  } catch (error) {
    Logger.log(`‚ùå L·ªói x√≥a trigger: ${error.message}`);
  }
}

/**
 * Ki·ªÉm tra danh s√°ch trigger hi·ªán t·∫°i
 */
function listCurrentTriggers() {
  try {
    const triggers = ScriptApp.getProjectTriggers();
    const habitTriggers = triggers.filter(trigger => 
      trigger.getHandlerFunction() === 'sendDailyHabitReport'
    );
    
    Logger.log(`üìã C√≥ ${habitTriggers.length} trigger ƒëang ho·∫°t ƒë·ªông:`);
    
    habitTriggers.forEach((trigger, index) => {
      const eventType = trigger.getEventType();
      if (eventType === ScriptApp.EventType.CLOCK) {
        // Kh√¥ng th·ªÉ l·∫•y th√¥ng tin chi ti·∫øt v·ªÅ th·ªùi gian t·ª´ trigger object
        Logger.log(`   ${index + 1}. Trigger ID: ${trigger.getUniqueId()}`);
      }
    });
    
  } catch (error) {
    Logger.log(`‚ùå L·ªói ki·ªÉm tra trigger: ${error.message}`);
  }
}

/**
 * Test function for new contribution grid feature
 */
function testContributionGrid() {
   try {
     Logger.log('üß™ Testing Contribution Grid Feature...');
     
     // Define CONFIG locally (same as in sendDailyHabitReport)
     const CONFIG = {
       spreadsheetId: '1TrFiuWnxOqh7UjxRRIEaF6DFRRutdNdO-OxBRGC9Oho',
       sheetName: 'habit',
       dataRange: 'C14:AI31',
       monthYearCell: 'C9',
       dayOfWeekRow: 14,
       dateRow: 15,
       habitNameCol: 'C',
       dataStartCol: 'E',
       debugMode: true
     };
     
     // Open spreadsheet
     const ss = SpreadsheetApp.openById(CONFIG.spreadsheetId);
     const sheet = ss.getSheetByName(CONFIG.sheetName);
     if (!sheet) {
       throw new Error(`Sheet "${CONFIG.sheetName}" not found`);
     }
     
     Logger.log('‚úÖ Sheet opened successfully');
     
     // Get today's column index
     const today = new Date();
     const todayDay = today.getDate();
     
     const dataRange = sheet.getRange(CONFIG.dataRange);
     const values = dataRange.getValues();
     const dateRow = values[CONFIG.dateRow - 14]; // Row 15 in sheet = index 1 in array
     
     let todayColIndex = -1;
     for (let col = 0; col < dateRow.length; col++) {
       if (dateRow[col] == todayDay) {
         todayColIndex = col;
         break;
       }
     }
     
     if (todayColIndex === -1) {
       Logger.log(`‚ö†Ô∏è Today's column not found for day ${todayDay}, using first column for test`);
       todayColIndex = 0;
     }
     
     // Get habits using existing analyzeHabits function
     const habits = analyzeHabits(values, todayColIndex, CONFIG);
     Logger.log(`üìä Found ${habits.length} habits`);
     
     // Test contribution grid
     const colors = {
       sectionTitle: '#1a1a1a',
       headerSubtitle: '#666666'
     };
     
     const contributionGrid = buildContributionGrid(
       sheet, 
       habits, 
       CONFIG, 
       colors, 
       false // isPerfectDay
     );
     
     Logger.log('‚úÖ Contribution grid generated successfully');
     Logger.log(`üìè Grid HTML length: ${contributionGrid.length} characters`);
     
     // Test complete - call main function
     Logger.log('üöÄ Running full daily report...');
     sendDailyHabitReport();
     
   } catch (error) {
     Logger.log(`‚ùå Test failed: ${error.message}`);
     Logger.log(`üìç Stack trace: ${error.stack}`);
   }
 }

/**
 * ENHANCED: Test function v·ªõi debug chi ti·∫øt
 */
function testHabitTracker() {
  Logger.log('üß™ TESTING HABIT TRACKER - Enhanced Debug Mode');
  
  // Test ƒë·ªçc c·∫•u tr√∫c sheet
  const CONFIG = {
    spreadsheetId: '1TrFiuWnxOqh7UjxRRIEaF6DFRRutdNdO-OxBRGC9Oho',
    sheetName: 'habit',
    dataRange: 'C14:AI31',
    monthYearCell: 'C9',
    debugMode: true
  };
  
  try {
    const ss = SpreadsheetApp.openById(CONFIG.spreadsheetId);
    const sheet = ss.getSheetByName(CONFIG.sheetName);
    
    // Test ƒë·ªçc th√°ng/nƒÉm
    const monthYear = sheet.getRange(CONFIG.monthYearCell).getValue();
    Logger.log(`üìÖ Th√°ng/nƒÉm t·ª´ C9: ${monthYear}`);
    
    // Test ƒë·ªçc h√†ng ng√†y
    const dataRange = sheet.getRange(CONFIG.dataRange);
    const values = dataRange.getValues();
    const dateRow = values[1]; // Row 15 = index 1
    Logger.log(`üìã H√†ng ng√†y (row 15): ${dateRow.slice(0, 10)}`); // Hi·ªÉn th·ªã 10 c·ªôt ƒë·∫ßu
    
    // Ng√†y h√¥m nay
    const today = new Date();
    const todayDay = today.getDate();
    Logger.log(`üéØ ƒêang t√¨m ng√†y: ${todayDay}`);
    
    // Test t√¨m c·ªôt
    for (let col = 0; col < Math.min(dateRow.length, 15); col++) {
      const cellValue = dateRow[col];
      Logger.log(`üìç C·ªôt ${col}: ${cellValue} (Type: ${typeof cellValue})`);
      if (cellValue == todayDay) {
        Logger.log(`‚úÖ FOUND! Ng√†y ${todayDay} ·ªü c·ªôt ${col}`);
      }
    }
    
  } catch (error) {
    Logger.log(`‚ùå Debug error: ${error.message}`);
  }
  
  // Ch·∫°y h√†m ch√≠nh
  sendDailyHabitReport();
}

/**
 * Debug c·∫•u tr√∫c sheet
 */
function debugSheetStructure() {
  const CONFIG = {
    spreadsheetId: '1TrFiuWnxOqh7UjxRRIEaF6DFRRutdNdO-OxBRGC9Oho',
    sheetName: 'habit'
  };
  
  try {
    const ss = SpreadsheetApp.openById(CONFIG.spreadsheetId);
    const sheet = ss.getSheetByName(CONFIG.sheetName);
    
    Logger.log('üîç =================');
    Logger.log('üìä SHEET STRUCTURE DEBUG');
    Logger.log('üîç =================');
    
    // C9 - Th√°ng/nƒÉm
    const monthYear = sheet.getRange('C9').getValue();
    Logger.log(`üìÖ C9 (Th√°ng/nƒÉm): "${monthYear}" | Type: ${typeof monthYear}`);
    
    // H√†ng 14 - Th·ª©
    const dayOfWeekRow = sheet.getRange('C14:AI14').getValues()[0];
    Logger.log(`üìã Row 14 (Th·ª©): [${dayOfWeekRow.slice(0, 10).join(', ')}...]`);
    
    // H√†ng 15 - Ng√†y
    const dateRow = sheet.getRange('C15:AI15').getValues()[0];
    Logger.log(`üìã Row 15 (Ng√†y): [${dateRow.slice(0, 10).join(', ')}...]`);
    
    // H√†ng 16 - Th√≥i quen ƒë·∫ßu ti√™n
    const firstHabitRow = sheet.getRange('C16:AI16').getValues()[0];
    const habitName = firstHabitRow[0];
    Logger.log(`üéØ Th√≥i quen ƒë·∫ßu ti√™n: "${habitName}"`);
    Logger.log(`üìä Data row 16: [${firstHabitRow.slice(0, 10).join(', ')}...]`);
    
    // Ng√†y h√¥m nay
    const today = new Date();
    Logger.log(`üóìÔ∏è H√¥m nay: ${today.getDate()}/${today.getMonth() + 1}/${today.getFullYear()}`);
    
  } catch (error) {
    Logger.log(`‚ùå Debug error: ${error.message}`);
  }
}

/**
 * X·ª≠ l√Ω HTTP GET requests cho Web App
 * @param {Object} e - Event object ch·ª©a parameters
 * @return {HtmlOutput} HTML response
 */
function doGet(e) {
  // Tr·∫£ v·ªÅ trang HTML ƒë∆°n gi·∫£n cho Web App
  const html = `
    <!DOCTYPE html>
    <html>
      <head>
        <title>Habit Tracker</title>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <style>
          body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 48px 24px;
            background: #ffffff;
            color: #000000;
          }
          .header {
            text-align: center;
            margin-bottom: 48px;
          }
          .status {
            background: #f8f9fa;
            padding: 24px;
            border-radius: 12px;
            border: 1px solid #e9ecef;
          }
          .success {
            color: #28a745;
            font-weight: 500;
          }
        </style>
      </head>
      <body>
        <div class="header">
          <h1>üéØ Habit Tracker</h1>
          <p>Google Apps Script Web App ƒë√£ ƒë∆∞·ª£c tri·ªÉn khai th√†nh c√¥ng</p>
        </div>
        <div class="status">
          <p class="success">‚úÖ Web App ƒëang ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng</p>
          <p>Slack Interactive URL ƒë√£ s·∫µn s√†ng ƒë·ªÉ nh·∫≠n webhook t·ª´ Slack</p>
        </div>
      </body>
    </html>
  `;
  
  return HtmlService.createHtmlOutput(html)
    .setTitle('Habit Tracker')
    .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);
}

/**
 * G·ª≠i b√°o c√°o th√≥i quen qua Slack v·ªõi interactive buttons
 */
function sendSlackReport(data) {
  try {
    const { habits, completedHabits, pendingHabits, completionRate, isPerfectDay, detailedDate, config } = data;
    
    // T·∫°o message cho Slack v·ªõi interactive elements
    const slackMessage = buildSlackMessage({
      habits,
      completedHabits,
      pendingHabits,
      completionRate,
      isPerfectDay,
      detailedDate
    });
    
    // G·ª≠i qua Slack Webhook
    const payload = {
      channel: config.slackChannel,
      username: 'Habit Tracker Bot',
      icon_emoji: isPerfectDay ? ':trophy:' : ':chart_with_upwards_trend:',
      blocks: slackMessage
    };
    
    const options = {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      payload: JSON.stringify(payload)
    };
    
    const response = UrlFetchApp.fetch(config.slackWebhookUrl, options);
    
    if (response.getResponseCode() === 200) {
      Logger.log('‚úÖ Slack message sent successfully');
    } else {
      Logger.log(`‚ùå Slack error: ${response.getResponseCode()} - ${response.getContentText()}`);
    }
    
  } catch (error) {
    Logger.log(`‚ùå L·ªói khi g·ª≠i Slack: ${error.message}`);
  }
}

/**
 * X√¢y d·ª±ng Slack message v·ªõi Slack Block Kit
 */
function buildSlackMessage(data) {
  const { habits, completedHabits, pendingHabits, completionRate, isPerfectDay, detailedDate } = data;
  
  const blocks = [];
  
  // Header
  blocks.push({
    type: 'header',
    text: {
      type: 'plain_text',
      text: `${isPerfectDay ? 'üéâ ' : ''}Habit Tracker Report`,
      emoji: true
    }
  });
  
  // Date v√† t·ªïng quan
  blocks.push({
    type: 'section',
    fields: [
      {
        type: 'mrkdwn',
        text: `*üìÖ Ng√†y:*\n${detailedDate}`
      },
      {
        type: 'mrkdwn',
        text: `*üìä Ti·∫øn ƒë·ªô:*\n${completedHabits.length}/${habits.length} th√≥i quen (${Math.round(completionRate)}%)`
      }
    ]
  });
  
  // Progress bar
  const progressBar = buildSlackProgressBar(completionRate);
  blocks.push({
    type: 'section',
    text: {
      type: 'mrkdwn',
      text: `*Ti·∫øn ƒë·ªô ho√†n th√†nh:*\n${progressBar}`
    }
  });
  
  // Divider
  blocks.push({ type: 'divider' });
  
  // Completed habits
  if (completedHabits.length > 0) {
    const completedText = completedHabits.map(habit => {
      const streakText = habit.streak > 0 ? ` (üî• ${habit.streak} ng√†y)` : '';
      return `‚úÖ ${habit.name}${streakText}`;
    }).join('\n');
    
    blocks.push({
      type: 'section',
      text: {
        type: 'mrkdwn',
        text: `*üéØ ƒê√£ ho√†n th√†nh (${completedHabits.length}):*\n${completedText}`
      }
    });
  }
  
  // Pending habits v·ªõi interactive buttons
  if (pendingHabits.length > 0) {
    blocks.push({
      type: 'section',
      text: {
        type: 'mrkdwn',
        text: `*‚è∞ Ch∆∞a th·ª±c hi·ªán (${pendingHabits.length}):*`
      }
    });
    
    // Th√™m buttons cho t·ª´ng habit ch∆∞a ho√†n th√†nh
    pendingHabits.forEach((habit, index) => {
      blocks.push({
        type: 'section',
        text: {
          type: 'mrkdwn',
          text: `‚è≥ ${habit.name}`
        },
        accessory: {
          type: 'button',
          text: {
            type: 'plain_text',
            text: '‚úÖ Ho√†n th√†nh',
            emoji: true
          },
          value: `complete_habit_${habit.name}_${new Date().toISOString().split('T')[0]}`,
          action_id: `complete_habit_${index}`,
          style: 'primary'
        }
      });
    });
  }
  
  // Divider
  blocks.push({ type: 'divider' });
  
  // Motivation message
  const motivationText = isPerfectDay 
    ? 'üèÜ *Perfect Day Achievement Unlocked!* Tuy·ªát v·ªùi! B·∫°n ƒë√£ ho√†n th√†nh t·∫•t c·∫£ th√≥i quen h√¥m nay!' 
    : 'üí™ *Keep building great habits!* Ng√†y mai l√† c∆° h·ªôi m·ªõi ƒë·ªÉ c·∫£i thi·ªán!';
  
  blocks.push({
    type: 'section',
    text: {
      type: 'mrkdwn',
      text: motivationText
    }
  });
  
  return blocks;
}

/**
 * T·∫°o progress bar cho Slack
 */
function buildSlackProgressBar(percentage) {
  const totalBars = 10;
  const filledBars = Math.round((percentage / 100) * totalBars);
  const emptyBars = totalBars - filledBars;
  
  const filled = '‚ñà'.repeat(filledBars);
  const empty = '‚ñë'.repeat(emptyBars);
  
  return `${filled}${empty} ${Math.round(percentage)}%`;
}

/**
 * X·ª≠ l√Ω Slack interactions (button clicks)
 * H√†m n√†y c·∫ßn ƒë∆∞·ª£c deploy nh∆∞ Web App ƒë·ªÉ nh·∫≠n POST requests t·ª´ Slack
 */
function doPost(e) {
  try {
    Logger.log('üì® Received Slack interaction');
    
    // Parse Slack payload
    const payload = JSON.parse(e.parameter.payload || e.postData.contents);
    
    if (payload.type === 'block_actions') {
      const action = payload.actions[0];
      const actionId = action.action_id;
      const value = action.value;
      
      Logger.log(`üîÑ Processing action: ${actionId}, value: ${value}`);
      
      // X·ª≠ l√Ω complete habit action
       if (actionId.startsWith('complete_habit_')) {
         const result = handleCompleteHabitFromSlack(value, payload.user.id);
         
         // T·∫°o response message v·ªõi updated progress
         const responseMessage = buildSlackResponseMessage(result, payload.user.id);
         
         // Tr·∫£ v·ªÅ response cho Slack
         return ContentService
           .createTextOutput(JSON.stringify({
             response_type: 'in_channel',
             text: result.message,
             blocks: responseMessage.blocks || undefined,
             replace_original: false
           }))
           .setMimeType(ContentService.MimeType.JSON);
       }
    }
    
    // Default response
    return ContentService
      .createTextOutput(JSON.stringify({ text: 'Action processed' }))
      .setMimeType(ContentService.MimeType.JSON);
      
  } catch (error) {
    Logger.log(`‚ùå Error processing Slack interaction: ${error.message}`);
    return ContentService
      .createTextOutput(JSON.stringify({ text: 'Error processing request' }))
      .setMimeType(ContentService.MimeType.JSON);
  }
}

/**
 * X·ª≠ l√Ω vi·ªác ƒë√°nh d·∫•u ho√†n th√†nh th√≥i quen t·ª´ Slack
 */
function handleCompleteHabitFromSlack(value, userId) {
  try {
    // Parse value: complete_habit_{habitName}_{date}
    const parts = value.split('_');
    const habitName = parts.slice(2, -1).join('_'); // L·∫•y t√™n habit (c√≥ th·ªÉ c√≥ underscore)
    const date = parts[parts.length - 1];
    
    Logger.log(`üéØ Completing habit: ${habitName} for date: ${date}`);
    
    // M·ªü Google Sheet
    const sheet = SpreadsheetApp.openById(CONFIG.spreadsheetId).getSheetByName(CONFIG.sheetName);
    const data = sheet.getDataRange().getValues();
    
    // T√¨m header row v√† habit column
    const headers = data[0];
    const habitColumnIndex = headers.findIndex(header => header.toString().toLowerCase() === habitName.toLowerCase());
    
    if (habitColumnIndex === -1) {
      return { success: false, message: `‚ùå Kh√¥ng t√¨m th·∫•y th√≥i quen: ${habitName}` };
    }
    
    // T√¨m row cho ng√†y hi·ªán t·∫°i
    const today = new Date();
    const todayString = Utilities.formatDate(today, Session.getScriptTimeZone(), 'yyyy-MM-dd');
    
    let targetRowIndex = -1;
    for (let i = 1; i < data.length; i++) {
      const rowDate = data[i][0];
      if (rowDate && Utilities.formatDate(new Date(rowDate), Session.getScriptTimeZone(), 'yyyy-MM-dd') === todayString) {
        targetRowIndex = i;
        break;
      }
    }
    
    // N·∫øu kh√¥ng t√¨m th·∫•y row cho h√¥m nay, t·∫°o m·ªõi
    if (targetRowIndex === -1) {
      const newRow = new Array(headers.length).fill('');
      newRow[0] = today; // Date column
      sheet.appendRow(newRow);
      targetRowIndex = sheet.getLastRow() - 1;
    }
    
    // C·∫≠p nh·∫≠t cell v·ªõi gi√° tr·ªã 1 (completed)
    const cellRange = sheet.getRange(targetRowIndex + 1, habitColumnIndex + 1);
    cellRange.setValue(1);
    
    // T√≠nh to√°n streak m·ªõi
    const streak = calculateHabitStreak(data, habitColumnIndex, targetRowIndex);
    
    Logger.log(`‚úÖ Habit completed: ${habitName}, streak: ${streak}`);
    
    return {
      success: true,
      message: `üéâ ƒê√£ ho√†n th√†nh "${habitName}"! ${streak > 1 ? `üî• Streak: ${streak} ng√†y` : ''}`
    };
    
  } catch (error) {
    Logger.log(`‚ùå Error completing habit from Slack: ${error.message}`);
    return { success: false, message: `‚ùå L·ªói: ${error.message}` };
  }
}

/**
  * T·∫°o response message cho Slack sau khi ho√†n th√†nh th√≥i quen
  */
 function buildSlackResponseMessage(result, userId) {
   if (!result.success) {
     return { blocks: [] };
   }
   
   try {
     // L·∫•y d·ªØ li·ªáu m·ªõi nh·∫•t sau khi c·∫≠p nh·∫≠t
     const today = new Date();
     const data = analyzeHabits(today);
     
     const blocks = [];
     
     // Header v·ªõi celebration
     blocks.push({
       type: 'section',
       text: {
         type: 'mrkdwn',
         text: `üéâ *Habit Updated!*\n${result.message}`
       }
     });
     
     // Updated progress
     const progressBar = buildSlackProgressBar(data.completionRate);
     blocks.push({
       type: 'section',
       text: {
         type: 'mrkdwn',
         text: `*üìä Ti·∫øn ƒë·ªô m·ªõi:* ${data.completedHabits.length}/${data.habits.length} th√≥i quen\n${progressBar}`
       }
     });
     
     // Perfect day achievement
     if (data.isPerfectDay) {
       blocks.push({
         type: 'section',
         text: {
           type: 'mrkdwn',
           text: 'üèÜ *PERFECT DAY ACHIEVED!* üèÜ\nB·∫°n ƒë√£ ho√†n th√†nh t·∫•t c·∫£ th√≥i quen h√¥m nay!'
         }
       });
     }
     
     return { blocks };
     
   } catch (error) {
     Logger.log(`‚ùå Error building response message: ${error.message}`);
     return { blocks: [] };
   }
 }
 
 /**
  * Test function ƒë·ªÉ ki·ªÉm tra Slack integration
  */
function testSlackIntegration() {
  Logger.log('üß™ Testing Slack Integration...');
  
  // Mock data for testing
  const testData = {
    habits: [
      { name: 'ƒê·ªçc s√°ch', completed: true, streak: 5 },
      { name: 'T·∫≠p th·ªÉ d·ª•c', completed: true, streak: 3 },
      { name: 'Thi·ªÅn', completed: false, streak: 0 }
    ],
    completedHabits: [
      { name: 'ƒê·ªçc s√°ch', completed: true, streak: 5 },
      { name: 'T·∫≠p th·ªÉ d·ª•c', completed: true, streak: 3 }
    ],
    pendingHabits: [
      { name: 'Thi·ªÅn', completed: false, streak: 0 }
    ],
    completionRate: 66.7,
    isPerfectDay: false,
    detailedDate: 'Th·ª© hai, ng√†y 7 th√°ng 1 nƒÉm 2025',
    config: {
      slackWebhookUrl: 'https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK',
      slackChannel: '#habit-tracker'
    }
  };
  
  sendSlackReport(testData);
  Logger.log('‚úÖ Slack test completed');
}

/**
 * Test function ƒë·ªÉ ki·ªÉm tra Slack interaction handling
 */
function testSlackInteraction() {
  Logger.log('üß™ Testing Slack Interaction...');
  
  // Mock Slack interaction payload
  const mockPayload = {
    type: 'block_actions',
    actions: [{
      action_id: 'complete_habit_0',
      value: 'complete_habit_Thi·ªÅn_2025-01-07'
    }],
    user: {
      id: 'U1234567890'
    }
  };
  
  const result = handleCompleteHabitFromSlack(mockPayload.actions[0].value, mockPayload.user.id);
   Logger.log(`‚úÖ Test result: ${JSON.stringify(result)}`);
 }
 
 /**
  * Utility function ƒë·ªÉ l·∫•y Web App URL cho Slack configuration
  */
 function getWebAppUrl() {
   const webAppUrl = ScriptApp.getService().getUrl();
   Logger.log(`üîó Web App URL: ${webAppUrl}`);
   Logger.log('üìã Copy URL n√†y v√† paste v√†o Slack App Interactivity settings');
   return webAppUrl;
 }
 
 /**
  * Comprehensive test cho to√†n b·ªô Slack integration workflow
  */
 function testCompleteSlackWorkflow() {
   Logger.log('üß™ Testing Complete Slack Workflow...');
   
   try {
     // 1. Test g·ª≠i b√°o c√°o v·ªõi buttons
     Logger.log('üì§ Step 1: Testing Slack report with buttons...');
     testSlackIntegration();
     
     // 2. Test x·ª≠ l√Ω button interaction
     Logger.log('üîÑ Step 2: Testing button interaction...');
     testSlackInteraction();
     
     // 3. Test response message building
     Logger.log('üí¨ Step 3: Testing response message...');
     const mockResult = {
       success: true,
       message: 'üéâ ƒê√£ ho√†n th√†nh "Test Habit"! üî• Streak: 5 ng√†y'
     };
     const responseMessage = buildSlackResponseMessage(mockResult, 'U1234567890');
     Logger.log(`‚úÖ Response message: ${JSON.stringify(responseMessage)}`);
     
     // 4. Hi·ªÉn th·ªã Web App URL
     Logger.log('üîó Step 4: Getting Web App URL...');
     getWebAppUrl();
     
     Logger.log('‚úÖ Complete Slack workflow test finished!');
     Logger.log('üìã Next steps:');
     Logger.log('   1. Deploy Web App v·ªõi quy·ªÅn "Anyone"');
     Logger.log('   2. Copy Web App URL v√†o Slack App Interactivity settings');
     Logger.log('   3. Test th·ª±c t·∫ø b·∫±ng c√°ch g·ª≠i b√°o c√°o v√† click buttons');
     
   } catch (error) {
     Logger.log(`‚ùå Workflow test error: ${error.message}`);
   }
 }
 
 /**
  * Quick setup function ƒë·ªÉ ki·ªÉm tra t·∫•t c·∫£ requirements
  */
 function checkSlackSetupRequirements() {
   Logger.log('üîç Checking Slack Setup Requirements...');
   
   const requirements = [];
   
   // Check CONFIG
   if (!CONFIG.slackWebhookUrl || CONFIG.slackWebhookUrl.includes('YOUR/SLACK/WEBHOOK')) {
     requirements.push('‚ùå C·∫ßn c·∫≠p nh·∫≠t slackWebhookUrl trong CONFIG');
   } else {
     requirements.push('‚úÖ Slack Webhook URL configured');
   }
   
   if (!CONFIG.slackChannel) {
     requirements.push('‚ùå C·∫ßn c·∫≠p nh·∫≠t slackChannel trong CONFIG');
   } else {
     requirements.push('‚úÖ Slack Channel configured');
   }
   
   if (!CONFIG.enableSlack) {
     requirements.push('‚ö†Ô∏è enableSlack = false (t√≠nh nƒÉng ƒëang t·∫Øt)');
   } else {
     requirements.push('‚úÖ Slack enabled');
   }
   
   // Check Google Sheets access
   try {
     const sheet = SpreadsheetApp.openById(CONFIG.spreadsheetId);
     requirements.push('‚úÖ Google Sheets access OK');
   } catch (error) {
     requirements.push('‚ùå Kh√¥ng th·ªÉ truy c·∫≠p Google Sheets');
   }
   
   // Display results
   requirements.forEach(req => Logger.log(req));
   
   const allGood = requirements.every(req => req.startsWith('‚úÖ'));
   if (allGood) {
     Logger.log('üéâ T·∫•t c·∫£ requirements ƒë√£ s·∫µn s√†ng!');
     Logger.log('üöÄ C√≥ th·ªÉ proceed v·ªõi Slack integration');
   } else {
     Logger.log('‚ö†Ô∏è C·∫ßn ho√†n th√†nh c√°c requirements tr√™n tr∆∞·ªõc khi ti·∫øp t·ª•c');
   }
   
   return allGood;
 }