/**
 * Test script ƒë·ªÉ ki·ªÉm tra t√≠ch h·ª£p b√†i h·ªçc h√†ng ng√†y v√†o Slack
 */

/**
 * Test h√†m getMotivationMessage v·ªõi b√†i h·ªçc t·ª´ Google Sheet
 */
function testSlackMotivationWithLessons() {
  Logger.log('=== TESTING SLACK MOTIVATION WITH LESSONS ===');
  
  try {
    // Test v·ªõi c√°c t·ª∑ l·ªá ho√†n th√†nh kh√°c nhau
    const testCases = [
      { isPerfectDay: true, completionRate: 100 },
      { isPerfectDay: false, completionRate: 80 },
      { isPerfectDay: false, completionRate: 50 },
      { isPerfectDay: false, completionRate: 20 },
      { isPerfectDay: false, completionRate: 0 }
    ];
    
    testCases.forEach((testCase, index) => {
      Logger.log(`\n--- Test Case ${index + 1}: ${testCase.completionRate}% completion ---`);
      
      const motivationMessage = getMotivationMessage(testCase.isPerfectDay, testCase.completionRate);
      Logger.log(`Motivation message: ${motivationMessage}`);
      
      // Ki·ªÉm tra xem c√≥ ch·ª©a b√†i h·ªçc kh√¥ng
      const hasLessons = motivationMessage.includes('üìö B√†i h·ªçc h√¥m nay:');
      const hasBullets = motivationMessage.includes('‚Ä¢');
      
      Logger.log(`Contains lessons: ${hasLessons ? 'YES ‚úÖ' : 'NO (using fallback) ‚ö†Ô∏è'}`);
      Logger.log(`Has bullet points: ${hasBullets ? 'YES ‚úÖ' : 'NO ‚ùå'}`);
    });
    
    return true;
    
  } catch (error) {
    Logger.log(`‚ùå Error in test: ${error.message}`);
    return false;
  }
}

/**
 * Test to√†n b·ªô Slack message v·ªõi b√†i h·ªçc
 */
function testSlackMessageWithLessons() {
  Logger.log('\n=== TESTING COMPLETE SLACK MESSAGE WITH LESSONS ===');
  
  try {
    // T·∫°o d·ªØ li·ªáu m·∫´u
    const mockReportData = {
      habits: [
        { name: 'ƒê·ªçc s√°ch', completed: true, streak: 5 },
        { name: 'T·∫≠p th·ªÉ d·ª•c', completed: false, streak: 0 },
        { name: 'Thi·ªÅn', completed: true, streak: 3 }
      ],
      completedHabits: [
        { name: 'ƒê·ªçc s√°ch', completed: true, streak: 5 },
        { name: 'Thi·ªÅn', completed: true, streak: 3 }
      ],
      pendingHabits: [
        { name: 'T·∫≠p th·ªÉ d·ª•c', completed: false, streak: 0 }
      ],
      completionRate: 66.67,
      isPerfectDay: false,
      today: new Date()
    };
    
    const mockConfig = {
      slackChannel: '#habits',
      enableSlack: true
    };
    
    // T·∫°o Slack message
    const slackMessage = buildSlackMessage(mockReportData, mockConfig);
    
    Logger.log('Generated Slack message:');
    Logger.log(JSON.stringify(slackMessage, null, 2));
    
    // Ki·ªÉm tra c√°c th√†nh ph·∫ßn
    const hasBlocks = slackMessage.blocks && slackMessage.blocks.length > 0;
    Logger.log(`Has blocks: ${hasBlocks ? 'YES ‚úÖ' : 'NO ‚ùå'}`);
    
    // T√¨m motivation section
    const motivationBlock = slackMessage.blocks.find(block => 
      block.type === 'section' && 
      block.text && 
      (block.text.text.includes('üìö B√†i h·ªçc h√¥m nay:') || 
       block.text.text.includes('Tuy·ªát v·ªùi!') ||
       block.text.text.includes('R·∫•t t·ªët!'))
    );
    
    if (motivationBlock) {
      Logger.log('‚úÖ Found motivation block:');
      Logger.log(motivationBlock.text.text);
      
      const hasLessons = motivationBlock.text.text.includes('üìö B√†i h·ªçc h√¥m nay:');
      Logger.log(`Contains lessons: ${hasLessons ? 'YES ‚úÖ' : 'NO (using fallback) ‚ö†Ô∏è'}`);
    } else {
      Logger.log('‚ùå No motivation block found');
    }
    
    return {
      hasBlocks: hasBlocks,
      hasMotivation: !!motivationBlock,
      messageGenerated: true
    };
    
  } catch (error) {
    Logger.log(`‚ùå Error testing Slack message: ${error.message}`);
    return { error: error.message };
  }
}

/**
 * Test Slack slash command v·ªõi b√†i h·ªçc
 */
function testSlackSlashCommandWithLessons() {
  Logger.log('\n=== TESTING SLACK SLASH COMMAND WITH LESSONS ===');
  
  try {
    const mockConfig = {
      spreadsheetId: '1yTWfP2PwkBvJ8WYR-d0jeE-OZJaf7snZDdBLI09gXnA',
      enableSlack: true,
      slackChannel: '#habits'
    };
    
    const mockEvent = {
      command: '/habit-report',
      text: '',
      user_name: 'testuser'
    };
    
    // Test slash command
    const response = handleSlashCommand(mockEvent, mockConfig);
    
    Logger.log('Slash command response:');
    Logger.log(JSON.stringify(response, null, 2));
    
    const hasBlocks = response.blocks && response.blocks.length > 0;
    Logger.log(`Response has blocks: ${hasBlocks ? 'YES ‚úÖ' : 'NO ‚ùå'}`);
    
    if (hasBlocks) {
      // T√¨m motivation trong response
      const motivationBlock = response.blocks.find(block => 
        block.type === 'section' && 
        block.text && 
        (block.text.text.includes('üìö B√†i h·ªçc h√¥m nay:') || 
         block.text.text.includes('Tuy·ªát v·ªùi!'))
      );
      
      if (motivationBlock) {
        Logger.log('‚úÖ Found motivation in slash command response:');
        Logger.log(motivationBlock.text.text);
        
        const hasLessons = motivationBlock.text.text.includes('üìö B√†i h·ªçc h√¥m nay:');
        Logger.log(`Contains lessons: ${hasLessons ? 'YES ‚úÖ' : 'NO (using fallback) ‚ö†Ô∏è'}`);
      }
    }
    
    return {
      responseGenerated: true,
      hasBlocks: hasBlocks,
      responseType: response.response_type
    };
    
  } catch (error) {
    Logger.log(`‚ùå Error testing slash command: ${error.message}`);
    return { error: error.message };
  }
}

/**
 * Test t·ªïng h·ª£p t·∫•t c·∫£ t√≠nh nƒÉng Slack v·ªõi b√†i h·ªçc
 */
function testAllSlackLessonsIntegration() {
  Logger.log('üîß TESTING ALL SLACK LESSONS INTEGRATION üîß');
  
  const motivationTest = testSlackMotivationWithLessons();
  const messageTest = testSlackMessageWithLessons();
  const slashCommandTest = testSlackSlashCommandWithLessons();
  
  Logger.log('\n=== SUMMARY ===');
  Logger.log(`Motivation Test: ${motivationTest ? '‚úÖ PASSED' : '‚ùå FAILED'}`);
  Logger.log(`Message Test: ${messageTest.messageGenerated ? '‚úÖ PASSED' : '‚ùå FAILED'}`);
  Logger.log(`Slash Command Test: ${slashCommandTest.responseGenerated ? '‚úÖ PASSED' : '‚ùå FAILED'}`);
  
  const allPassed = motivationTest && messageTest.messageGenerated && slashCommandTest.responseGenerated;
  Logger.log(`\nüéØ Overall Result: ${allPassed ? '‚úÖ ALL TESTS PASSED' : '‚ùå SOME TESTS FAILED'}`);
  
  return {
    motivation: motivationTest,
    message: messageTest,
    slashCommand: slashCommandTest,
    allPassed: allPassed
  };
}

/**
 * Test nhanh ch·ªâ motivation message
 */
function quickTestSlackLessons() {
  Logger.log('‚ö° QUICK TEST SLACK LESSONS ‚ö°');
  
  try {
    const message = getMotivationMessage(false, 75);
    Logger.log(`Motivation message: ${message}`);
    
    const hasLessons = message.includes('üìö B√†i h·ªçc h√¥m nay:');
    Logger.log(`Result: ${hasLessons ? '‚úÖ USING LESSONS' : '‚ö†Ô∏è USING FALLBACK'}`);
    
    return hasLessons;
    
  } catch (error) {
    Logger.log(`‚ùå Error: ${error.message}`);
    return false;
  }
}

/**
 * H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng
 */
function showSlackLessonsTestInstructions() {
  Logger.log('üìã SLACK LESSONS TEST INSTRUCTIONS');
  Logger.log('=====================================');
  Logger.log('1. quickTestSlackLessons() - Test nhanh motivation message');
  Logger.log('2. testSlackMotivationWithLessons() - Test chi ti·∫øt motivation');
  Logger.log('3. testSlackMessageWithLessons() - Test to√†n b·ªô Slack message');
  Logger.log('4. testSlackSlashCommandWithLessons() - Test slash command');
  Logger.log('5. testAllSlackLessonsIntegration() - Test t·ªïng h·ª£p t·∫•t c·∫£');
  Logger.log('');
  Logger.log('üí° ƒê·ªÉ test trong Slack th·∫≠t:');
  Logger.log('   - G√µ /habit-report trong Slack channel');
  Logger.log('   - Ki·ªÉm tra xem c√≥ hi·ªÉn th·ªã "üìö B√†i h·ªçc h√¥m nay:" kh√¥ng');
}