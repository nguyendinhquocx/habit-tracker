/**
 * Test script v·ªõi mock data ƒë·ªÉ ki·ªÉm tra t√≠ch h·ª£p b√†i h·ªçc v√†o Slack
 */

// Mock SpreadsheetApp v√† c√°c dependencies
const SpreadsheetApp = {
  openById: function(id) {
    return {
      getSheetByName: function(name) {
        if (name === 'bai hoc moi ngay') {
          return {
            getDataRange: function() {
              return {
                getValues: function() {
                  return [
                    ['B√†i h·ªçc', 'T√°c gi·∫£'],
                    ['Th√†nh c√¥ng kh√¥ng ph·∫£i l√† ch√¨a kh√≥a c·ªßa h·∫°nh ph√∫c. H·∫°nh ph√∫c m·ªõi l√† ch√¨a kh√≥a c·ªßa th√†nh c√¥ng.', 'Albert Schweitzer'],
                    ['C√°ch t·ªët nh·∫•t ƒë·ªÉ d·ª± ƒëo√°n t∆∞∆°ng lai l√† t·∫°o ra n√≥.', 'Peter Drucker'],
                    ['ƒê·ª´ng ch·ªù ƒë·ª£i c∆° h·ªôi. H√£y t·∫°o ra ch√∫ng.', 'George Bernard Shaw'],
                    ['Th·∫•t b·∫°i l√† c∆° h·ªôi ƒë·ªÉ b·∫Øt ƒë·∫ßu l·∫°i m·ªôt c√°ch th√¥ng minh h∆°n.', 'Henry Ford'],
                    ['H√†nh ƒë·ªông l√† ch√¨a kh√≥a c∆° b·∫£n c·ªßa m·ªçi th√†nh c√¥ng.', 'Pablo Picasso']
                  ];
                }
              };
            }
          };
        }
        return null;
      }
    };
  }
};

const Logger = {
  log: console.log
};

// Mock PropertiesService
const PropertiesService = {
  getScriptProperties: function() {
    return {
      getProperty: function(key) {
        if (key === 'SPREADSHEET_ID') {
          return '1yTWfP2PwkBvJ8WYR-d0jeE-OZJaf7snZDdBLI09gXnA';
        }
        return null;
      }
    };
  }
};

// Include daily-lessons functions
function readDailyLessons() {
  try {
    Logger.log('üìö Reading daily lessons from sheet: bai hoc moi ngay');
    
    const spreadsheetId = PropertiesService.getScriptProperties().getProperty('SPREADSHEET_ID');
    if (!spreadsheetId) {
      throw new Error('SPREADSHEET_ID not found in script properties');
    }
    
    const spreadsheet = SpreadsheetApp.openById(spreadsheetId);
    const sheet = spreadsheet.getSheetByName('bai hoc moi ngay');
    
    if (!sheet) {
      throw new Error('Sheet "bai hoc moi ngay" not found');
    }
    
    const data = sheet.getDataRange().getValues();
    
    if (data.length <= 1) {
      Logger.log('‚ö†Ô∏è No lesson data found (only headers or empty)');
      return [];
    }
    
    const lessons = [];
    for (let i = 1; i < data.length; i++) {
      const row = data[i];
      if (row[0] && row[0].toString().trim()) {
        lessons.push({
          baiHoc: row[0].toString().trim(),
          tacGia: row[1] ? row[1].toString().trim() : ''
        });
      }
    }
    
    Logger.log(`‚úÖ Successfully read ${lessons.length} lessons`);
    return lessons;
    
  } catch (error) {
    Logger.log(`‚ùå Error reading daily lessons: ${error.message}`);
    return [];
  }
}

function getRandomLessons(count = 3) {
  try {
    const allLessons = readDailyLessons();
    
    if (!allLessons || allLessons.length === 0) {
      Logger.log('‚ö†Ô∏è No lessons available');
      return [];
    }
    
    const shuffled = [...allLessons].sort(() => 0.5 - Math.random());
    const selected = shuffled.slice(0, Math.min(count, allLessons.length));
    
    Logger.log(`üé≤ Selected ${selected.length} random lessons`);
    return selected;
    
  } catch (error) {
    Logger.log(`‚ùå Error getting random lessons: ${error.message}`);
    return [];
  }
}

// Include Slack functions
function getMotivationMessage(isPerfectDay, completionRate) {
  try {
    // Try to get daily lessons from Google Sheet
    const lessons = getRandomLessons(2); // Get 2 lessons for Slack
    
    if (lessons && lessons.length > 0) {
      let motivationText = "*üìö B√†i h·ªçc h√¥m nay:*\n";
      lessons.forEach((lesson, index) => {
        motivationText += `‚Ä¢ ${lesson.baiHoc}\n`;
      });
      return motivationText.trim();
    }
  } catch (error) {
    Logger.log(`‚ö†Ô∏è Could not load daily lessons for Slack: ${error.message}`);
  }
  
  // Fallback to default motivation messages
  if (isPerfectDay) {
    return "*Tuy·ªát v·ªùi!* B·∫°n ƒë√£ ho√†n th√†nh t·∫•t c·∫£ th√≥i quen h√¥m nay. H√£y ti·∫øp t·ª•c duy tr√¨!";
  } else if (completionRate >= 80) {
    return "*R·∫•t t·ªët!* B·∫°n ƒë√£ ho√†n th√†nh h·∫ßu h·∫øt c√°c th√≥i quen. H√£y c·ªë g·∫Øng ho√†n thi·ªán nh·ªØng th√≥i quen c√≤n l·∫°i!";
  } else if (completionRate >= 50) {
    return "*Kh√¥ng t·ªá!* B·∫°n ƒë√£ ho√†n th√†nh h∆°n m·ªôt n·ª≠a. H√£y ti·∫øp t·ª•c ph·∫•n ƒë·∫•u!";
  } else if (completionRate > 0) {
    return "*Kh·ªüi ƒë·∫ßu t·ªët!* M·ªói b∆∞·ªõc nh·ªè ƒë·ªÅu c√≥ √Ω nghƒ©a. H√£y ti·∫øp t·ª•c!";
  } else {
    return "*H√¥m nay ch∆∞a b·∫Øt ƒë·∫ßu?* Kh√¥ng sao, h√£y b·∫Øt ƒë·∫ßu ngay b√¢y gi·ªù!";
  }
}

// Test functions
function testSlackMotivationWithLessons() {
  Logger.log('=== TESTING SLACK MOTIVATION WITH LESSONS (MOCK) ===');
  
  try {
    // Test v·ªõi c√°c t·ª∑ l·ªá ho√†n th√†nh kh√°c nhau
    const testCases = [
      { isPerfectDay: true, completionRate: 100 },
      { isPerfectDay: false, completionRate: 80 },
      { isPerfectDay: false, completionRate: 50 },
      { isPerfectDay: false, completionRate: 20 },
      { isPerfectDay: false, completionRate: 0 }
    ];
    
    testCases.forEach((testCase, index) => {
      Logger.log(`\n--- Test Case ${index + 1}: ${testCase.completionRate}% completion ---`);
      
      const motivationMessage = getMotivationMessage(testCase.isPerfectDay, testCase.completionRate);
      Logger.log(`Motivation message: ${motivationMessage}`);
      
      // Ki·ªÉm tra xem c√≥ ch·ª©a b√†i h·ªçc kh√¥ng
      const hasLessons = motivationMessage.includes('üìö B√†i h·ªçc h√¥m nay:');
      const hasBullets = motivationMessage.includes('‚Ä¢');
      
      Logger.log(`Contains lessons: ${hasLessons ? 'YES ‚úÖ' : 'NO (using fallback) ‚ö†Ô∏è'}`);
      Logger.log(`Has bullet points: ${hasBullets ? 'YES ‚úÖ' : 'NO ‚ùå'}`);
    });
    
    return true;
    
  } catch (error) {
    Logger.log(`‚ùå Error in test: ${error.message}`);
    return false;
  }
}

function quickTestSlackLessons() {
  Logger.log('‚ö° QUICK TEST SLACK LESSONS (MOCK) ‚ö°');
  
  try {
    const message = getMotivationMessage(false, 75);
    Logger.log(`Motivation message: ${message}`);
    
    const hasLessons = message.includes('üìö B√†i h·ªçc h√¥m nay:');
    Logger.log(`Result: ${hasLessons ? '‚úÖ USING LESSONS' : '‚ö†Ô∏è USING FALLBACK'}`);
    
    return hasLessons;
    
  } catch (error) {
    Logger.log(`‚ùå Error: ${error.message}`);
    return false;
  }
}

function testLessonsData() {
  Logger.log('üìä TESTING LESSONS DATA');
  
  const lessons = getRandomLessons(3);
  Logger.log(`Found ${lessons.length} lessons:`);
  
  lessons.forEach((lesson, index) => {
    Logger.log(`${index + 1}. "${lesson.baiHoc}" - ${lesson.tacGia}`);
  });
  
  return lessons.length > 0;
}

// Run tests
function runAllTests() {
  Logger.log('üß™ RUNNING ALL SLACK LESSONS TESTS WITH MOCK DATA üß™');
  Logger.log('='.repeat(60));
  
  const dataTest = testLessonsData();
  const quickTest = quickTestSlackLessons();
  const fullTest = testSlackMotivationWithLessons();
  
  Logger.log('\n=== SUMMARY ===');
  Logger.log(`Data Test: ${dataTest ? '‚úÖ PASSED' : '‚ùå FAILED'}`);
  Logger.log(`Quick Test: ${quickTest ? '‚úÖ PASSED' : '‚ùå FAILED'}`);
  Logger.log(`Full Test: ${fullTest ? '‚úÖ PASSED' : '‚ùå FAILED'}`);
  
  const allPassed = dataTest && quickTest && fullTest;
  Logger.log(`\nüéØ Overall Result: ${allPassed ? '‚úÖ ALL TESTS PASSED' : '‚ùå SOME TESTS FAILED'}`);
  
  if (allPassed) {
    Logger.log('\nüéâ T√≠ch h·ª£p b√†i h·ªçc v√†o Slack ƒë√£ ho·∫°t ƒë·ªông!');
    Logger.log('üí° ƒê·ªÉ test trong Slack th·∫≠t, h√£y g√µ /habit-report trong channel');
  }
  
  return allPassed;
}

// Export for testing
if (typeof module !== 'undefined' && module.exports) {
  module.exports = {
    testSlackMotivationWithLessons,
    quickTestSlackLessons,
    testLessonsData,
    runAllTests,
    getMotivationMessage,
    getRandomLessons
  };
}

// Auto-run if called directly
if (require.main === module) {
  runAllTests();
}