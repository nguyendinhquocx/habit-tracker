/**
 * Test script ƒë·ªÉ ki·ªÉm tra vi·ªác s·ª≠a l·ªói m√†u ch·ªØ v√† lo·∫°i b·ªè icon trong b√†i h·ªçc
 */

/**
 * Test hi·ªÉn th·ªã HTML c·ªßa b√†i h·ªçc sau khi s·ª≠a
 */
function testLessonsHTMLFix() {
  Logger.log('=== TESTING LESSONS HTML FIX ===');
  
  try {
    // Test v·ªõi d·ªØ li·ªáu m·∫´u
    const sampleLessons = [
      { baiHoc: 'Th√†nh c√¥ng kh√¥ng ph·∫£i l√† ƒë√≠ch ƒë·∫øn m√† l√† h√†nh tr√¨nh.' },
      { baiHoc: 'M·ªói ng√†y l√† m·ªôt c∆° h·ªôi m·ªõi ƒë·ªÉ tr·ªü th√†nh phi√™n b·∫£n t·ªët h∆°n c·ªßa ch√≠nh m√¨nh.' },
      { baiHoc: 'Ki√™n tr√¨ l√† ch√¨a kh√≥a ƒë·ªÉ v∆∞·ª£t qua m·ªçi th·ª≠ th√°ch.' },
      { baiHoc: 'H√£y t·∫≠p trung v√†o ti·∫øn b·ªô, kh√¥ng ph·∫£i s·ª± ho√†n h·∫£o.' }
    ];
    
    // Test HTML generation
    const html = buildLessonsHTML(sampleLessons);
    Logger.log('Generated HTML:');
    Logger.log(html);
    
    // Ki·ªÉm tra xem c√≥ c√≤n icon kh√¥ng
    const hasEmoji = /[\u{1F300}-\u{1F9FF}]/u.test(html);
    Logger.log(`Contains emoji/icons: ${hasEmoji ? 'YES (‚ùå FAILED)' : 'NO (‚úÖ PASSED)'}`);
    
    // Ki·ªÉm tra m√†u ch·ªØ
    const hasWhiteColor = html.includes('color: white');
    const hasProperColor = html.includes('color: #333333');
    Logger.log(`Has white color: ${hasWhiteColor ? 'YES (‚ùå FAILED)' : 'NO (‚úÖ PASSED)'}`);
    Logger.log(`Has proper dark color: ${hasProperColor ? 'YES (‚úÖ PASSED)' : 'NO (‚ùå FAILED)'}`);
    
    // Test v·ªõi empty lessons
    const emptyHTML = buildLessonsHTML([]);
    Logger.log('\nEmpty lessons HTML:');
    Logger.log(emptyHTML);
    
    const emptyHasEmoji = /[\u{1F300}-\u{1F9FF}]/u.test(emptyHTML);
    Logger.log(`Empty HTML contains emoji: ${emptyHasEmoji ? 'YES (‚ùå FAILED)' : 'NO (‚úÖ PASSED)'}`);
    
    return {
      htmlGenerated: html.length > 0,
      noEmojis: !hasEmoji,
      properColors: hasProperColor && !hasWhiteColor,
      emptyHandled: emptyHTML.length > 0 && !emptyHasEmoji
    };
    
  } catch (error) {
    Logger.log(`‚ùå Error in test: ${error.message}`);
    return { error: error.message };
  }
}

/**
 * Test hi·ªÉn th·ªã text c·ªßa b√†i h·ªçc sau khi s·ª≠a
 */
function testLessonsTextFix() {
  Logger.log('\n=== TESTING LESSONS TEXT FIX ===');
  
  try {
    const sampleLessons = [
      { baiHoc: 'Th√†nh c√¥ng kh√¥ng ph·∫£i l√† ƒë√≠ch ƒë·∫øn m√† l√† h√†nh tr√¨nh.' },
      { baiHoc: 'M·ªói ng√†y l√† m·ªôt c∆° h·ªôi m·ªõi ƒë·ªÉ tr·ªü th√†nh phi√™n b·∫£n t·ªët h∆°n c·ªßa ch√≠nh m√¨nh.' }
    ];
    
    const text = buildLessonsText(sampleLessons);
    Logger.log('Generated Text:');
    Logger.log(text);
    
    // Ki·ªÉm tra xem c√≥ c√≤n emoji kh√¥ng
    const hasEmoji = /[\u{1F300}-\u{1F9FF}]/u.test(text);
    Logger.log(`Contains emoji/icons: ${hasEmoji ? 'YES (‚ùå FAILED)' : 'NO (‚úÖ PASSED)'}`);
    
    // Ki·ªÉm tra c√≥ bullet point kh√¥ng
    const hasBullet = text.includes('‚Ä¢');
    Logger.log(`Has bullet points: ${hasBullet ? 'YES (‚úÖ PASSED)' : 'NO (‚ùå FAILED)'}`);
    
    return {
      textGenerated: text.length > 0,
      noEmojis: !hasEmoji,
      hasBullets: hasBullet
    };
    
  } catch (error) {
    Logger.log(`‚ùå Error in test: ${error.message}`);
    return { error: error.message };
  }
}

/**
 * Test t·ªïng h·ª£p t·∫•t c·∫£ c√°c s·ª≠a ƒë·ªïi
 */
function testAllFixes() {
  Logger.log('\n=== COMPREHENSIVE FIX TEST ===');
  
  const htmlResult = testLessonsHTMLFix();
  const textResult = testLessonsTextFix();
  
  Logger.log('\n=== SUMMARY ===');
  Logger.log(`HTML Test - Generated: ${htmlResult.htmlGenerated}, No Emojis: ${htmlResult.noEmojis}, Proper Colors: ${htmlResult.properColors}`);
  Logger.log(`Text Test - Generated: ${textResult.textGenerated}, No Emojis: ${textResult.noEmojis}, Has Bullets: ${textResult.hasBullets}`);
  
  const allPassed = htmlResult.htmlGenerated && htmlResult.noEmojis && htmlResult.properColors && 
                   textResult.textGenerated && textResult.noEmojis && textResult.hasBullets;
  
  Logger.log(`\nüéØ Overall Result: ${allPassed ? '‚úÖ ALL TESTS PASSED' : '‚ùå SOME TESTS FAILED'}`);
  
  return {
    html: htmlResult,
    text: textResult,
    allPassed: allPassed
  };
}

/**
 * Test v·ªõi d·ªØ li·ªáu th·ª±c t·ª´ Google Sheet
 */
function testRealDataFix() {
  Logger.log('\n=== TESTING WITH REAL DATA ===');
  
  try {
    // L·∫•y d·ªØ li·ªáu th·ª±c t·ª´ sheet
    const lessons = getRandomLessons(4);
    Logger.log(`Found ${lessons.length} real lessons`);
    
    if (lessons.length > 0) {
      const html = buildLessonsHTML(lessons);
      const text = buildLessonsText(lessons);
      
      const htmlHasEmoji = /[\u{1F300}-\u{1F9FF}]/u.test(html);
      const textHasEmoji = /[\u{1F300}-\u{1F9FF}]/u.test(text);
      const hasProperColor = html.includes('color: #333333');
      
      Logger.log(`Real data HTML has emojis: ${htmlHasEmoji ? 'YES (‚ùå)' : 'NO (‚úÖ)'}`);
      Logger.log(`Real data text has emojis: ${textHasEmoji ? 'YES (‚ùå)' : 'NO (‚úÖ)'}`);
      Logger.log(`Real data has proper colors: ${hasProperColor ? 'YES (‚úÖ)' : 'NO (‚ùå)'}`);
      
      return {
        lessonsFound: lessons.length,
        htmlNoEmojis: !htmlHasEmoji,
        textNoEmojis: !textHasEmoji,
        properColors: hasProperColor
      };
    } else {
      Logger.log('‚ö†Ô∏è No real lessons found to test');
      return { lessonsFound: 0 };
    }
    
  } catch (error) {
    Logger.log(`‚ùå Error testing real data: ${error.message}`);
    return { error: error.message };
  }
}

// H√†m ch·∫°y t·∫•t c·∫£ test
function runAllFixTests() {
  Logger.log('üîß RUNNING ALL FIX TESTS üîß');
  
  testAllFixes();
  testRealDataFix();
  
  Logger.log('\n‚úÖ All fix tests completed!');
}