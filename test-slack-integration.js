/**
 * Test t√≠ch h·ª£p Slack v·ªõi b√†i h·ªçc h√†ng ng√†y
 * File n√†y ƒë·ªÉ test trong Google Apps Script environment
 */

/**
 * Test h√†m getMotivationMessage trong Slack v·ªõi b√†i h·ªçc th·ª±c
 */
function testSlackMotivationReal() {
  Logger.log('=== TESTING SLACK MOTIVATION WITH REAL DATA ===');
  
  try {
    // Test v·ªõi c√°c t·ª∑ l·ªá ho√†n th√†nh kh√°c nhau
    const testCases = [
      { isPerfectDay: true, completionRate: 100, description: 'Perfect Day' },
      { isPerfectDay: false, completionRate: 80, description: 'High Completion' },
      { isPerfectDay: false, completionRate: 50, description: 'Medium Completion' },
      { isPerfectDay: false, completionRate: 20, description: 'Low Completion' },
      { isPerfectDay: false, completionRate: 0, description: 'No Completion' }
    ];
    
    testCases.forEach((testCase, index) => {
      Logger.log(`\n--- Test Case ${index + 1}: ${testCase.description} (${testCase.completionRate}%) ---`);
      
      const motivationMessage = getMotivationMessage(testCase.isPerfectDay, testCase.completionRate);
      Logger.log(`Motivation message: ${motivationMessage}`);
      
      // Ki·ªÉm tra xem c√≥ ch·ª©a b√†i h·ªçc kh√¥ng
      const hasLessons = motivationMessage.includes('üìö B√†i h·ªçc h√¥m nay:');
      const hasBullets = motivationMessage.includes('‚Ä¢');
      const isFallback = motivationMessage.includes('Tuy·ªát v·ªùi!') || 
                        motivationMessage.includes('R·∫•t t·ªët!') || 
                        motivationMessage.includes('Kh√¥ng t·ªá!') ||
                        motivationMessage.includes('Kh·ªüi ƒë·∫ßu t·ªët!') ||
                        motivationMessage.includes('H√¥m nay ch∆∞a b·∫Øt ƒë·∫ßu?');
      
      Logger.log(`Contains lessons: ${hasLessons ? 'YES ‚úÖ' : 'NO ‚ùå'}`);
      Logger.log(`Has bullet points: ${hasBullets ? 'YES ‚úÖ' : 'NO ‚ùå'}`);
      Logger.log(`Using fallback: ${isFallback ? 'YES ‚ö†Ô∏è' : 'NO ‚úÖ'}`);
      
      if (hasLessons) {
        // ƒê·∫øm s·ªë b√†i h·ªçc
        const lessonCount = (motivationMessage.match(/‚Ä¢/g) || []).length;
        Logger.log(`Number of lessons: ${lessonCount}`);
      }
    });
    
    return true;
    
  } catch (error) {
    Logger.log(`‚ùå Error in test: ${error.message}`);
    Logger.log(`Stack trace: ${error.stack}`);
    return false;
  }
}

/**
 * Test to√†n b·ªô Slack message v·ªõi b√†i h·ªçc th·ª±c
 */
function testSlackMessageReal() {
  Logger.log('\n=== TESTING COMPLETE SLACK MESSAGE WITH REAL DATA ===');
  
  try {
    // T·∫°o d·ªØ li·ªáu m·∫´u gi·ªëng nh∆∞ th·ª±c t·∫ø
    const mockReportData = {
      habits: [
        { name: 'ƒê·ªçc s√°ch 30 ph√∫t', completed: true, streak: 5 },
        { name: 'T·∫≠p th·ªÉ d·ª•c', completed: false, streak: 0 },
        { name: 'Thi·ªÅn 10 ph√∫t', completed: true, streak: 3 },
        { name: 'Vi·∫øt nh·∫≠t k√Ω', completed: false, streak: 0 }
      ],
      completedHabits: [
        { name: 'ƒê·ªçc s√°ch 30 ph√∫t', completed: true, streak: 5 },
        { name: 'Thi·ªÅn 10 ph√∫t', completed: true, streak: 3 }
      ],
      pendingHabits: [
        { name: 'T·∫≠p th·ªÉ d·ª•c', completed: false, streak: 0 },
        { name: 'Vi·∫øt nh·∫≠t k√Ω', completed: false, streak: 0 }
      ],
      completionRate: 50,
      isPerfectDay: false,
      today: new Date()
    };
    
    const mockConfig = {
      slackChannel: '#habits',
      enableSlack: true
    };
    
    // T·∫°o Slack message
    const slackMessage = buildSlackMessage(mockReportData, mockConfig);
    
    Logger.log('Generated Slack message structure:');
    Logger.log(`Channel: ${slackMessage.channel}`);
    Logger.log(`Number of blocks: ${slackMessage.blocks ? slackMessage.blocks.length : 0}`);
    
    // Ki·ªÉm tra c√°c th√†nh ph·∫ßn
    const hasBlocks = slackMessage.blocks && slackMessage.blocks.length > 0;
    Logger.log(`Has blocks: ${hasBlocks ? 'YES ‚úÖ' : 'NO ‚ùå'}`);
    
    if (hasBlocks) {
      // T√¨m motivation section
      const motivationBlock = slackMessage.blocks.find(block => 
        block.type === 'section' && 
        block.text && 
        (block.text.text.includes('üìö B√†i h·ªçc h√¥m nay:') || 
         block.text.text.includes('Tuy·ªát v·ªùi!') ||
         block.text.text.includes('R·∫•t t·ªët!') ||
         block.text.text.includes('Kh√¥ng t·ªá!'))
      );
      
      if (motivationBlock) {
        Logger.log('‚úÖ Found motivation block:');
        Logger.log(`Text: ${motivationBlock.text.text}`);
        
        const hasLessons = motivationBlock.text.text.includes('üìö B√†i h·ªçc h√¥m nay:');
        const lessonCount = hasLessons ? (motivationBlock.text.text.match(/‚Ä¢/g) || []).length : 0;
        
        Logger.log(`Contains lessons: ${hasLessons ? 'YES ‚úÖ' : 'NO (using fallback) ‚ö†Ô∏è'}`);
        if (hasLessons) {
          Logger.log(`Number of lessons: ${lessonCount}`);
        }
      } else {
        Logger.log('‚ùå No motivation block found');
      }
      
      // Ki·ªÉm tra c√°c block kh√°c
      const headerBlock = slackMessage.blocks.find(block => block.type === 'header');
      const sectionBlocks = slackMessage.blocks.filter(block => block.type === 'section');
      const actionBlocks = slackMessage.blocks.filter(block => block.type === 'actions');
      
      Logger.log(`Header blocks: ${headerBlock ? 1 : 0}`);
      Logger.log(`Section blocks: ${sectionBlocks.length}`);
      Logger.log(`Action blocks: ${actionBlocks.length}`);
    }
    
    return {
      hasBlocks: hasBlocks,
      messageGenerated: true,
      blockCount: slackMessage.blocks ? slackMessage.blocks.length : 0
    };
    
  } catch (error) {
    Logger.log(`‚ùå Error testing Slack message: ${error.message}`);
    Logger.log(`Stack trace: ${error.stack}`);
    return { error: error.message };
  }
}

/**
 * Test ƒë·ªçc b√†i h·ªçc tr·ª±c ti·∫øp
 */
function testLessonsDirectly() {
  Logger.log('\n=== TESTING LESSONS READING DIRECTLY ===');
  
  try {
    // Test ƒë·ªçc t·∫•t c·∫£ b√†i h·ªçc
    Logger.log('1. Testing getDailyLessons()...');
    const allLessons = getDailyLessons();
    Logger.log(`‚úÖ Found ${allLessons.length} total lessons`);
    
    if (allLessons.length > 0) {
      Logger.log('Sample lesson:', JSON.stringify(allLessons[0], null, 2));
    }
    
    // Test l·∫•y ng·∫´u nhi√™n
    Logger.log('\n2. Testing getRandomLessons(2)...');
    const randomLessons = getRandomLessons(2);
    Logger.log(`‚úÖ Got ${randomLessons.length} random lessons`);
    
    randomLessons.forEach((lesson, index) => {
      Logger.log(`Lesson ${index + 1}: "${lesson.baiHoc}" - ${lesson.tacGia}`);
    });
    
    return {
      totalLessons: allLessons.length,
      randomLessons: randomLessons.length,
      success: true
    };
    
  } catch (error) {
    Logger.log(`‚ùå Error testing lessons: ${error.message}`);
    Logger.log(`Stack trace: ${error.stack}`);
    return { error: error.message, success: false };
  }
}

/**
 * Test t·ªïng h·ª£p t·∫•t c·∫£
 */
function testSlackLessonsIntegrationComplete() {
  Logger.log('üß™ COMPLETE SLACK LESSONS INTEGRATION TEST üß™');
  Logger.log('='.repeat(60));
  
  const lessonsTest = testLessonsDirectly();
  const motivationTest = testSlackMotivationReal();
  const messageTest = testSlackMessageReal();
  
  Logger.log('\n=== FINAL SUMMARY ===');
  Logger.log(`Lessons Reading: ${lessonsTest.success ? '‚úÖ PASSED' : '‚ùå FAILED'}`);
  if (lessonsTest.success) {
    Logger.log(`  - Total lessons available: ${lessonsTest.totalLessons}`);
    Logger.log(`  - Random lessons retrieved: ${lessonsTest.randomLessons}`);
  }
  
  Logger.log(`Motivation Test: ${motivationTest ? '‚úÖ PASSED' : '‚ùå FAILED'}`);
  Logger.log(`Message Test: ${messageTest.messageGenerated ? '‚úÖ PASSED' : '‚ùå FAILED'}`);
  if (messageTest.messageGenerated) {
    Logger.log(`  - Blocks generated: ${messageTest.blockCount}`);
  }
  
  const allPassed = lessonsTest.success && motivationTest && messageTest.messageGenerated;
  Logger.log(`\nüéØ Overall Result: ${allPassed ? '‚úÖ ALL TESTS PASSED' : '‚ùå SOME TESTS FAILED'}`);
  
  if (allPassed) {
    Logger.log('\nüéâ T√≠ch h·ª£p b√†i h·ªçc v√†o Slack ƒë√£ s·∫µn s√†ng!');
    Logger.log('üí° ƒê·ªÉ test trong Slack th·∫≠t:');
    Logger.log('   1. G√µ /habit-report trong Slack channel');
    Logger.log('   2. Ho·∫∑c ch·∫°y sendSlackReport() ƒë·ªÉ g·ª≠i b√°o c√°o t·ª± ƒë·ªông');
    Logger.log('   3. Ki·ªÉm tra xem c√≥ hi·ªÉn th·ªã "üìö B√†i h·ªçc h√¥m nay:" kh√¥ng');
  } else {
    Logger.log('\n‚ö†Ô∏è C·∫ßn ki·ªÉm tra l·∫°i:');
    if (!lessonsTest.success) {
      Logger.log('   - K·∫øt n·ªëi ƒë·∫øn Google Sheet b√†i h·ªçc');
      Logger.log('   - C·∫•u tr√∫c d·ªØ li·ªáu trong sheet "bai hoc moi ngay"');
    }
    if (!motivationTest) {
      Logger.log('   - H√†m getMotivationMessage trong slack.js');
    }
    if (!messageTest.messageGenerated) {
      Logger.log('   - H√†m buildSlackMessage trong slack.js');
    }
  }
  
  return {
    lessons: lessonsTest,
    motivation: motivationTest,
    message: messageTest,
    allPassed: allPassed
  };
}

/**
 * Test nhanh ch·ªâ motivation
 */
function quickTestSlackLessonsReal() {
  Logger.log('‚ö° QUICK TEST SLACK LESSONS (REAL) ‚ö°');
  
  try {
    const message = getMotivationMessage(false, 75);
    Logger.log(`Motivation message: ${message}`);
    
    const hasLessons = message.includes('üìö B√†i h·ªçc h√¥m nay:');
    Logger.log(`Result: ${hasLessons ? '‚úÖ USING LESSONS' : '‚ö†Ô∏è USING FALLBACK'}`);
    
    if (hasLessons) {
      const lessonCount = (message.match(/‚Ä¢/g) || []).length;
      Logger.log(`Number of lessons: ${lessonCount}`);
    }
    
    return hasLessons;
    
  } catch (error) {
    Logger.log(`‚ùå Error: ${error.message}`);
    return false;
  }
}

/**
 * H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng
 */
function showSlackTestInstructions() {
  Logger.log('üìã SLACK INTEGRATION TEST INSTRUCTIONS');
  Logger.log('======================================');
  Logger.log('1. quickTestSlackLessonsReal() - Test nhanh motivation message');
  Logger.log('2. testLessonsDirectly() - Test ƒë·ªçc b√†i h·ªçc t·ª´ Google Sheet');
  Logger.log('3. testSlackMotivationReal() - Test chi ti·∫øt motivation v·ªõi c√°c t·ª∑ l·ªá');
  Logger.log('4. testSlackMessageReal() - Test to√†n b·ªô Slack message');
  Logger.log('5. testSlackLessonsIntegrationComplete() - Test t·ªïng h·ª£p t·∫•t c·∫£');
  Logger.log('');
  Logger.log('üí° ƒê·ªÉ test trong Slack th·∫≠t:');
  Logger.log('   - ƒê·∫£m b·∫£o ƒë√£ c·∫•u h√¨nh Slack webhook URL');
  Logger.log('   - G√µ /habit-report trong Slack channel');
  Logger.log('   - Ho·∫∑c ch·∫°y sendSlackReport() v·ªõi d·ªØ li·ªáu th·∫≠t');
  Logger.log('   - Ki·ªÉm tra xem c√≥ hi·ªÉn th·ªã "üìö B√†i h·ªçc h√¥m nay:" kh√¥ng');
}